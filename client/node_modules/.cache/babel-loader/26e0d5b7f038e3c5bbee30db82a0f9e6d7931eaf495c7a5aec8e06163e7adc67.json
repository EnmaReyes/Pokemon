{"ast":null,"code":"const validacion = (form, errors, setErrors) => {\n  let newErrors = {};\n\n  ////! Validaciones numéricas\\\\\\\\\n  if (isNaN(form.hp)) {\n    newErrors = {\n      ...newErrors,\n      hp: \"ingresar datos numericos\"\n    };\n  } else if (form.hp === \"\") {\n    newErrors = {\n      ...newErrors,\n      hp: \"*\"\n    };\n  } else if (form.hp > 1500) {\n    newErrors = {\n      ...newErrors,\n      hp: \"cantidad no permitida\"\n    };\n  }\n  if (isNaN(form.attack)) {\n    newErrors = {\n      ...newErrors,\n      attack: \"ingresar datos numericos\"\n    };\n  } else if (form.attack === \"\") {\n    newErrors = {\n      ...newErrors,\n      attack: \"*\"\n    };\n  } else if (form.attack > 100) {\n    newErrors = {\n      ...newErrors,\n      attack: \"cantidad no permitida\"\n    };\n  }\n  if (isNaN(form.defense)) {\n    newErrors = {\n      ...newErrors,\n      defense: \"ingresar datos numericos\"\n    };\n  } else if (form.defense === \"\") {\n    newErrors = {\n      ...newErrors,\n      defense: \"*\"\n    };\n  } else if (form.defense > 100) {\n    newErrors = {\n      ...newErrors,\n      defense: \"cantidad no permitida\"\n    };\n  }\n  if (isNaN(form.speed)) {\n    newErrors = {\n      ...newErrors,\n      speed: \"ingresar datos numericos\"\n    };\n  } else if (form.speed === \"\") {\n    newErrors = {\n      ...newErrors,\n      speed: \"*\"\n    };\n  } else if (form.speed > 1500) {\n    newErrors = {\n      ...newErrors,\n      speed: \"cantidad no permitida\"\n    };\n  }\n  if (isNaN(form.height)) {\n    newErrors = {\n      ...newErrors,\n      height: \"ingresar datos numericos\"\n    };\n  } else if (form.height === \"\") {\n    newErrors = {\n      ...newErrors,\n      height: \"*\"\n    };\n  } else if (form.height > 100) {\n    newErrors = {\n      ...newErrors,\n      height: \"cantidad no permitida\"\n    };\n  }\n  if (isNaN(form.weight)) {\n    newErrors = {\n      ...newErrors,\n      weight: \"ingresar datos numericos\"\n    };\n  } else if (form.weight === \"\") {\n    newErrors = {\n      ...newErrors,\n      weight: \"*\"\n    };\n  } else if (form.weight > 100) {\n    newErrors = {\n      ...newErrors,\n      weight: \"cantidad no permitida\"\n    };\n  }\n\n  ////!Validaciones de strings\\\\\\\\\n\n  const soloLetras = /^[A-Za-z]+$/;\n  const soloUrl = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n  if (form.name === \"\") {\n    setErrors({\n      ...errors,\n      name: \"*\"\n    });\n  } else if (!soloLetras.test(form.name)) {\n    newErrors = {\n      ...newErrors,\n      name: \"solo letras\"\n    };\n  }\n  if (form.type === \"\") {\n    setErrors({\n      ...errors,\n      type: \"*\"\n    });\n  } else if (!soloLetras.test(form.type)) {\n    newErrors = {\n      ...newErrors,\n      type: \"solo letras\"\n    };\n  }\n  if (form.image === \"\") {\n    setErrors({\n      ...errors,\n      image: \"*\"\n    });\n  } else if (!soloUrl.test(form.image)) {\n    newErrors = {\n      ...newErrors,\n      image: \"solo url\"\n    };\n  }\n  setErrors(newErrors);\n};\nexport default validacion;","map":{"version":3,"names":["validacion","form","errors","setErrors","newErrors","isNaN","hp","attack","defense","speed","height","weight","soloLetras","soloUrl","name","test","type","image"],"sources":["C:/Users/enmar/OneDrive/Documentos/Pokemon/client/src/views/Form/Validacion.js"],"sourcesContent":["const validacion = (form, errors, setErrors) => {\r\n    let newErrors = {};\r\n  \r\n                                ////! Validaciones numéricas\\\\\\\\\r\n    if (isNaN(form.hp)) {\r\n      newErrors = {...newErrors, hp: \"ingresar datos numericos\"};\r\n    } else if (form.hp === \"\") {\r\n      newErrors = {...newErrors, hp: \"*\"};\r\n    } else if (form.hp > 1500) {\r\n      newErrors = {...newErrors, hp: \"cantidad no permitida\"};\r\n    }\r\n  \r\n    if (isNaN(form.attack)) {\r\n      newErrors = {...newErrors, attack: \"ingresar datos numericos\"};\r\n    } else if (form.attack === \"\") {\r\n      newErrors = {...newErrors, attack: \"*\"};\r\n    } else if (form.attack > 100) {\r\n      newErrors = {...newErrors, attack: \"cantidad no permitida\"};\r\n    }\r\n\r\n    if (isNaN(form.defense)) {\r\n        newErrors = {...newErrors, defense: \"ingresar datos numericos\"};\r\n      } else if (form.defense === \"\") {\r\n        newErrors = {...newErrors, defense: \"*\"};\r\n      } else if (form.defense > 100) {\r\n        newErrors = {...newErrors, defense: \"cantidad no permitida\"};\r\n      }\r\n  \r\n    if (isNaN(form.speed)) {\r\n      newErrors = {...newErrors, speed: \"ingresar datos numericos\"};\r\n    } else if (form.speed === \"\") {\r\n      newErrors = {...newErrors, speed: \"*\"};\r\n    } else if (form.speed > 1500) {\r\n      newErrors = {...newErrors, speed: \"cantidad no permitida\"};\r\n    }\r\n  \r\n    if (isNaN(form.height)) {\r\n      newErrors = {...newErrors, height: \"ingresar datos numericos\"};\r\n    } else if (form.height === \"\") {\r\n      newErrors = {...newErrors, height: \"*\"};\r\n    } else if (form.height > 100) {\r\n      newErrors = {...newErrors, height: \"cantidad no permitida\"};\r\n    }\r\n  \r\n    if (isNaN(form.weight)) {\r\n      newErrors = {...newErrors, weight: \"ingresar datos numericos\"};\r\n    } else if (form.weight === \"\") {\r\n      newErrors = {...newErrors, weight: \"*\"};\r\n    } else if (form.weight > 100) {\r\n      newErrors = {...newErrors, weight: \"cantidad no permitida\"};\r\n    }\r\n  \r\n                                ////!Validaciones de strings\\\\\\\\\r\n\r\n    const soloLetras = /^[A-Za-z]+$/;\r\n    const soloUrl= /^(ftp|http|https):\\/\\/[^ \"]+$/;\r\n  \r\n    if(form.name === \"\"){\r\n        setErrors({...errors, name: \"*\"});\r\n    }else if (!soloLetras.test(form.name)) {\r\n      newErrors = {...newErrors, name: \"solo letras\"};\r\n    }\r\n\r\n    if(form.type === \"\"){\r\n        setErrors({...errors, type: \"*\"}); \r\n    }else if (!soloLetras.test(form.type)) {\r\n      newErrors = {...newErrors, type: \"solo letras\"};\r\n    }\r\n\r\n    if(form.image === \"\"){\r\n        setErrors({...errors, image: \"*\"});\r\n    }else if (!soloUrl.test(form.image)) {\r\n        newErrors = {...newErrors, image: \"solo url\"};\r\n      }\r\n  \r\n    \r\n    setErrors(newErrors);\r\n  }\r\n  \r\n  export default validacion;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}