{"ast":null,"code":"import { GET_POKEMONS, GET_POKEDEX, FILTER_BY_TYPE, GET_TYPES, GET_POKEMON_DETAIL, FILTER_DB, FILTER_NAME, GET_POKEMON_NAME, GET_POKEMON_ID, RESET_DETAILS } from \"./actions\";\nexport const initalState = {\n  pokemones: [],\n  types: [],\n  allPokemons: [],\n  pokemonDetail: []\n};\nconst rootReducer = (state = initalState, action) => {\n  switch (action.type) {\n    case GET_POKEMONS:\n      return {\n        ...state,\n        pokemones: action.payload,\n        allPokemons: action.payload\n      };\n    case GET_POKEMON_NAME:\n      return {\n        ...state,\n        pokemones: action.payload\n      };\n    case GET_POKEMON_ID:\n      return {\n        ...state,\n        pokemones: action.payload\n      };\n    case GET_POKEDEX:\n      return {\n        ...state,\n        pokemones: action.payload\n      };\n    case RESET_DETAILS:\n      return {\n        ...state,\n        pokemonDetails: {}\n      };\n    case GET_POKEMON_DETAIL:\n      const detailPokemon = action.payload;\n      return {\n        ...state,\n        pokemonDetail: detailPokemon\n      };\n    case GET_TYPES:\n      return {\n        ...state,\n        types: action.payload\n      };\n    case FILTER_BY_TYPE:\n      const allpokemons = state.allPokemons;\n      const filtertypes = action.payload === \"all\" ? allpokemons : allpokemons.filter(pokemon => pokemon.type.some(type => type === action.payload));\n      return {\n        ...state,\n        pokemones: filtertypes\n      };\n    case FILTER_DB:\n      const pokemonDB = state.allPokemons;\n      const filterDB = action.payload === \"Created\" ? pokemonDB.filter(db => typeof db.id === \"string\") : state.allPokemons;\n      return {\n        ...state,\n        pokemones: filterDB\n      };\n    case FILTER_NAME:\n      let sortArr = action.payload === \"A-Z\" ? state.pokemones.sort((a, b) => {\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (b.name > a.name) {\n          return -1;\n        }\n        return 0;\n      }) : state.pokemones.sort((a, b) => {\n        if (a.name > b.name) {\n          return -1;\n        }\n        if (b.name > a.name) {\n          return 1;\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        pokemones: sortArr\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_POKEMONS","GET_POKEDEX","FILTER_BY_TYPE","GET_TYPES","GET_POKEMON_DETAIL","FILTER_DB","FILTER_NAME","GET_POKEMON_NAME","GET_POKEMON_ID","RESET_DETAILS","initalState","pokemones","types","allPokemons","pokemonDetail","rootReducer","state","action","type","payload","pokemonDetails","detailPokemon","allpokemons","filtertypes","filter","pokemon","some","pokemonDB","filterDB","db","id","sortArr","sort","a","b","name"],"sources":["C:/Users/enmar/OneDrive/Documentos/Pokemon/client/src/Components/Redux/reducer.js"],"sourcesContent":["import {GET_POKEMONS,\r\n        GET_POKEDEX,\r\n        FILTER_BY_TYPE,\r\n        GET_TYPES,\r\n        GET_POKEMON_DETAIL,\r\n        FILTER_DB,\r\n        FILTER_NAME,\r\n        GET_POKEMON_NAME,\r\n        GET_POKEMON_ID,\r\n        RESET_DETAILS} from \"./actions\";\r\n\r\n\r\nexport const initalState = {\r\n    pokemones: [],\r\n    types: [],\r\n    allPokemons : [],\r\n    pokemonDetail: [],\r\n};\r\n\r\n\r\nconst rootReducer =(state = initalState, action)=>{\r\n    switch(action.type){\r\n        case GET_POKEMONS:\r\n            return {...state, pokemones: action.payload, allPokemons: action.payload};\r\n\r\n         case GET_POKEMON_NAME:\r\n            return{...state, pokemones: action.payload}\r\n            \r\n         case GET_POKEMON_ID:\r\n         return{...state, pokemones: action.payload}\r\n         \r\n        case GET_POKEDEX: \r\n            return {...state, pokemones: action.payload};\r\n            \r\n        case RESET_DETAILS:\r\n                return {\r\n                    ...state,\r\n                    pokemonDetails: {},\r\n                }\r\n            \r\n        case GET_POKEMON_DETAIL: \r\n            const detailPokemon = action.payload\r\n        return {...state, \r\n            pokemonDetail: detailPokemon};\r\n\r\n        case GET_TYPES:\r\n            return{...state, types: action.payload};\r\n\r\n        case FILTER_BY_TYPE:\r\n            const allpokemons = state.allPokemons;\r\n            const filtertypes = action.payload === \"all\" ? allpokemons : allpokemons.filter(\r\n                pokemon => pokemon.type.some(type => type === action.payload));\r\n            return {...state, pokemones: filtertypes};\r\n\r\n        case FILTER_DB:\r\n            const pokemonDB = state.allPokemons;\r\n            const filterDB =  action.payload === \"Created\" ? pokemonDB.filter(db => typeof db.id === \"string\") : state.allPokemons \r\n                return {\r\n                    ...state,\r\n                   pokemones: filterDB\r\n                }\r\n\r\n        case FILTER_NAME:\r\n\r\n            let sortArr = action.payload === \"A-Z\"?\r\n            state.pokemones.sort((a,b)=>{\r\n                if (a.name > b.name){\r\n                    return 1;\r\n                }\r\n                if (b.name > a.name){\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            }):\r\n            state.pokemones.sort((a,b)=>{\r\n                if(a.name > b.name){\r\n                    return -1;\r\n                }\r\n                if(b.name > a.name){\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            })\r\n            return{\r\n                ...state, pokemones: sortArr\r\n            }\r\n\r\n        default:\r\n            return{...state};\r\n    }\r\n}\r\n\r\nexport default rootReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}